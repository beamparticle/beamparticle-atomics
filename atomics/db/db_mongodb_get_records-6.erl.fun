%% @doc Get records from a mongodb database collection based on selector
%% @author Neeraj Sharma <neeraj.sharma@alumni.iitg.ernet.in>
%%
%% run db_mongodb_get_records("localhost", 27017, <<"dbname">>, <<"collection">>, , #{<<"status">> => <<"ok">>, <<"type">> => <<"sometype">>}, 10)
%% run db_mongodb_get_records("localhost", 27017, <<"dbname">>, <<"collection">>, , #{}, 10)
%% run {json, db_mongodb_get_records("localhost", 27017, <<"dbname">>, <<"collection">>, , #{}, 10)}
%%
%% @todo The batchsize is fixed at 10, which must be settable via
%%       options.
%%
%% see https://www.bountysource.com/issues/41596981-how-to-get-collection-names-in-the-database
%% for some help on using erlang mongodb
%%
%% fun(Hist :: binary(), Port :: integer(),
%%     Database :: binary(), Collection :: binary(),
%%     Selector :: map(), MaxRecords :: integer()) -> {ok, map()} | {error, term()}.
fun(Host, Port, Database, Collection, Selector, MaxRecords) when
    is_list(Host) andalso is_integer(Port) andalso is_binary(Database) andalso
    is_binary(Collection) andalso is_map(Selector) andalso is_integer(MaxRecords) ->
    %% By default timeout for all connections to connection gen_server is infinity.
    %% If you found problems with it - you can modify timeout. To modify it just
    %% add mc_worker_call_timeout with new value to your applications's env config.
    application:set_env(beamparticle, mc_worker_call_timeout, 5000),
    {ok, Connection} = mc_worker_api:connect([
        {database, Database},
        {host, Host},
        {port, Port}]),
    Args = #{batchsize => 10},
    {ok, Cursor} = mc_worker_api:find(Connection, Collection, Selector, Args),
    %% FirstResult = mc_cursor:next(Cursor),
    Result = mc_cursor:foldl(fun(R, AccIn) ->
                    %% fix _id key, which is autogenerated, so that it can be
                    %% json serialized an example of the value is as follows:
                    %% <<"_id">> => {<<90,14,38,131,212,50,226,72,128,228,37,...>>}
                    {MongoId} = maps:get(<<"_id">>, R),
                    R2 = R#{<<"_id">> => beamparticle_util:bin_to_hex_binary(MongoId)},
                    %% MongoDB can also return tuple or other types which must
                    %% be converted so that they can be json serialized
                    R3 = beamparticle_util:convert_for_json_encoding(R2),
                    [R3 | AccIn]
                end, [], Cursor, MaxRecords),
    case erlang:is_process_alive(Cursor) of
        true ->
            mc_cursor:close(Cursor);
        false ->
            ok
    end,
    mc_worker_api:disconnect(Connection),
    #{<<"result">> => Result}
end.
